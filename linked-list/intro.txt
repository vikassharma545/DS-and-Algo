# Problem with array
-> fixed size
-> during run time we cannot decide size of array
-> we make program for user so user decide size of array

#Linked list
-> always create in heap memory
-> collection of nodes 
-> every node having two space
-> one space for data
-> second space for pointer which point another node create linked between next node
-> easy to insert or remove element by insert node or remove by changing pointer space


HEAD(pointer) ->  first_node(data,pointer1) ->  second node(data,pointer3)  -> ... last node (data, null_pointer)   



#Create linked list

-> first create node using struct

    struct node
    {
        int data;      // variable for data       
        Node * next;   // pointer for next node (pointer type = node itself)
    }

-> create first node and Last node

    Node *Head = new Node;
    Node *Last = new Node; 

-> initial last node is Head Node
    Last = Head;

-> create temp node 
    Node *Temp = new Node;

-> pointing last node pointer to temp node
    Last->next = Temp;

-> make temp node as last now
    Last = Temp;



#some syntax
  q=p        // whatever point q p will also point there
  q=p->next  // q point next node of point
  p=p->next  // p itself point to next node now


# (p = NULL or zero) true 
-> p=Null
-> p=0
-> !p


#traversing node(go one by one to another node)

-> create temp pointer which point first pointer 
    int * temp = Head; // wrong 
    Node *temp;   // right  (pointer type node itself)

-> aftre doing any operation by first node data point temp to next node
    like printing i.e cout<<temp->data<<endl;
    temp = temp->next;










